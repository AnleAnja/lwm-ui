// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@import '~@angular/material/theming';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
// $lwm-ui-primary: mat-palette($mat-purple);
// $lwm-ui-accent: mat-palette($mat-orange, A200, A100, A400);

// // The warn palette is optional (defaults to red).
// $lwm-ui-warn: mat-palette($mat-red);

// // Create the theme object (a Sass map containing all of the palettes).
// $lwm-ui-theme: mat-light-theme($lwm-ui-primary, $lwm-ui-accent, $lwm-ui-warn);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
//@include angular-material-theme($lwm-ui-theme);

@import 'lwm.theme.config';

// Define a custom typography config that overrides the font-family as well as the
// `headlines` and `body-1` levels.
$custom-typography: mat-typography-config(
  $font-family: $lwm-font-family,
  $headline: mat-typography-level(32px, 48px, 700),
  $body-1: mat-typography-level(16px, 24px, 500)
);

@include mat-base-typography($custom-typography);

// Override typography for a specific Angular Material components.
@include mat-checkbox-typography($custom-typography);

// Override typography for all Angular Material, including mat-base-typography and all components.
@include angular-material-typography($custom-typography);

// Override the typography in the core CSS.
@include mat-core($custom-typography);

@function getPaletteFrom($color) {
  @return (
    50:  lighten($color, 50%),
    100: lighten($color, 40%),
    200: lighten($color, 30%),
    300: lighten($color, 20%),
    400: lighten($color, 10%),
    500: $color,
    600:  darken($color, 10%),
    700:  darken($color, 20%),
    800:  darken($color, 30%),
    900:  darken($color, 40%),
    A100: darken($color, 50%),
    A200: darken($color, 60%),
    A400: darken($color, 70%),
    A700: darken($color, 80%),
    contrast: (
      50: $black-87-opacity,
      100: $black-87-opacity,
      200: $black-87-opacity,
      300: $black-87-opacity,
      400: $black-87-opacity,
      500: white,
      600: white,
      700: white,
      800: $white-87-opacity,
      900: $white-87-opacity,
      A100: $black-87-opacity,
      A200: white,
      A400: white,
      A700: white,
    )
  );
}

$lwm-primary-color-palette-values: getPaletteFrom($lwm-ui-primary);
$lwm-accent-color-palette-values: getPaletteFrom($lwm-ui-accent);
$lwm-warn-color-palette-values: getPaletteFrom($lwm-ui-warn);


// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darkes
// hue.
$lwm-primary-palette: mat-palette($lwm-primary-color-palette-values, 900);
$lwm-accent-palette: mat-palette($lwm-accent-color-palette-values, 900);
$lwm-warn-palette: mat-palette($lwm-warn-color-palette-values, A700);

// Create the theme object (a Sass map containing all of the palettes).
$theme: mat-light-theme(
    $lwm-primary-palette,
    $lwm-accent-palette
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($theme);
